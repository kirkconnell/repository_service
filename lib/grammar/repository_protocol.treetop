grammar RepositoryProtocol

  rule message
    credential / response / request / reply / challenge

    {
      def node_type
        "message"
      end
    }
  end

  rule credential
    credential_hdr public_key certificates credential_end
    {
      def message_type
        "credential"
      end
      
      def pk
         public_key.data
      end
      
      def certs
        certificates.certs
      end

      def node_type
        "credential"
      end
            
    }
  end
  
  rule certificates
    certificate*
    {
      def certs
        elements.collect { |cert| cert.data }
      end

      def node_type
        "certificates"
      end
    }
  end
  
  rule public_key
    public_key_hdr encoded_block public_key_end
    {
      def data
        text_value
      end

      def node_type
        "public_key"
      end
    }
  end
  
  rule signature
    signature_hdr encoded_block signature_end
    {
      def data
        encoded_block.data
      end

      def node_type
        "signature"
      end
    }
  end
  
  rule validity
    validity_hdr not_before time_tuple not_after time_tuple validity_end
    {
      def data
        { :not_before => elements[2].data, :not_after => elements[4].data }
      end

      def node_type
        "validity"
      end
    }
  end
  
  rule time_tuple
    space "datime(" num "," num "," num "," num "," num "," num ")." space
    {
      def data
        text_value.delete "\r\n\s\t"
      end

      def node_type
        "time_tuple"
      end
    }
  end                     
  
  rule certificate
    cert_hdr clauses optional_validity public_key signature cert_end
    {
      def data
        { :clauses => clauses.data, 
          :validity => optional_validity.data, 
          :pk => public_key.data,
          :signature => signature.data,
          :signed_data => [ clauses.data, 
                            optional_validity.data[:not_before],
                            optional_validity.data[:not_after] ].join,
          :clauses => clauses.elements 
        }
      end

      def node_type
        "certificate"
      end
    }
  end
  
  rule optional_validity
    validity?
    {
      def data
        elements.first.data unless elements.empty?
      end

      def node_type
        "optional_validity"
      end
    }
  end
  
  rule clauses
    clause+
    {
      def data
        text_value.delete("\r\n\s\t")
      end

      def node_type
        "clauses"
      end
    }
  end
  
  rule clause
    clause_content space
    {
      def import(rsa_key)
        clause_content.import(rsa_key)
      end

      def imported_clause?
        clause_content.imported_clause?
      end

      def node_type
        "clause"
      end
    }
  end

  rule clause_content
    implication / single_atom
    {
      def import(rsa_key)
        internal_import(rsa_key)
      end

      def imported_clause?
        elements.first.imported_clause?
      end

      def node_type
        "clause_content"
      end
    }
  end

  rule single_atom
    literal "."
    {
      def internal_import(rsa_key)
        unless elements.first.elements.first.text_value == "says("
          "#{literal.import(rsa_key)}."
        else
          nil
        end
      end

      def node_type
        "single_atom"
      end
    }
  end

  rule implication
    literal ":-" literal other_literals "."
    {
      def import(rsa_key)
        imported_string = ""        
        elements.each do |e|
          imported_string << if e.respond_to? "import"
            e.import(rsa_key) 
          else
            e.text_value
          end
        end
        imported_string.squeeze(" ").delete("\t\r\n")
      end

      def node_type
        "implication"
      end
    }
  end

  rule other_literals
    ("," literal)*
    {
      def import(rsa_key)
        imported_clause = ""
        elements.each do |e|
          imported_clause << ",#{e.elements.last.import(rsa_key)}"
        end
        imported_clause
      end
    }
  end
  
  rule literal
    ( "says(" iden "," predicate ")" space ) / predicate
    {
      def import(rsa_key)
        "says(#{rsa_key}, #{text_value})"
      end

      def node_type
        "literal"
      end
    }
  end
  
  rule predicate
    iden "(" iden ("," iden)* ")" space
    {
      def node_type
        "predicate"
      end
    }
  end
  
  rule challenge
    challenge_hdr challenge_block challenge_end
    {
      def message_type
        "challenge"
      end

      def node_type
        "challenge"
      end
    }
  end  
  
  rule response
    response_hdr encoded_block response_end
    {
      def message_type
        "response"
      end
      
      def m
        encoded_block.data
      end
      
      def node_type
        "response"
      end
    }
  end
  
  rule request
    request_hdr "request(" op "," iden ")" request_end
    {
      def message_type
        "request"
      end
      
      def request
        "request(#{operation}, #{file})"
      end
      
      def operation
        op.text_value.delete "\r\n\s\t"
      end
      
      def file
        iden.text_value.delete "\r\n\s\t"
      end

      def node_type
        "request"
      end
    }
  end 
  
  rule op
    space ("read" / "write" / "commit") space
  end 
  
  rule reply
    reply_hdr result reply_end
    {
      def message_type
        "resply"
      end

      def node_type
        "reply"
      end
    }
  end
  
  rule result
    "granted" / "denied"
  end
  
  rule credential_hdr
    space "-----BEGIN MPKI CREDENTIAL-----" space
  end
  
  rule credential_end
    space "-----END MPKI CREDENTIAL-----" space
  end
  
  rule public_key_hdr
    space "-----BEGIN PUBLIC KEY-----" space
  end
  
  rule public_key_end
    space "-----END PUBLIC KEY-----" space
  end
  
  rule signature_hdr
    space "-----BEGIN SIGNATURE-----" space
  end
  
  rule signature_end
    space "-----END SIGNATURE-----" space
  end
  
  rule validity_hdr
    space "-----BEGIN VALIDITY-----" space
  end
  
  rule validity_end
    space "-----END VALIDITY-----" space
  end
  
  rule cert_hdr
    space "-----BEGIN MPKI CERTIFICATE-----" space
  end
  
  rule cert_end
    space "-----END MPKI CERTIFICATE-----" space
  end
  
  rule challenge_hdr
    space "-----BEGIN MPKI CHALLENGE-----" space
  end
  
  rule challenge_end
    space "-----END MPKI CHALLENGE-----" space
  end
  
  rule response_hdr
    space "-----BEGIN MPKI CHALLENGE RESPONSE-----" space
  end
  
  rule response_end
    space "-----END MPKI CHALLENGE RESPONSE-----" space
  end
  
  rule request_hdr
    space "-----BEGIN REPOSITORY CLIENT REQUEST-----" space
  end
  
  rule request_end
    space "-----END REPOSITORY CLIENT REQUEST-----" space
  end
  
  rule reply_hdr
    space "-----BEGIN REPOSITORY SERVER REPLY-----" space
  end
  
  rule reply_end
    space "-----END REPOSITORY SERVER REPLY-----" space
  end
  
  rule not_before
    space "Not before:" space
  end
  
  rule not_after
    space "Not after:" space
  end
  
  rule encoded_block
    space [a-zA-Z0-9\/\+\=\r\n]+ space
    {
      def data
        text_value.delete "\r\n\t\s"
      end
    }
  end
  
  rule challenge_block
    space [a-zA-Z0-9\:]+ space
  end
  
  rule num
    space [0-9]+ space
  end
  
  rule iden
    space [a-zA-Z\_] [a-zA-Z0-9\_\-]* space
  end
  
  rule space
    [\s\t\r\n]*
  end
  
end
